{"remainingRequest":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\ts-loader\\index.js??ref--13-2!C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfAnzahlLoesungen_schwer.vue?vue&type=script&lang=ts","dependencies":[{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfAnzahlLoesungen_schwer.vue","mtime":1634121887615},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632349277000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfAnzahlLoesungen_schwer.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({\r\n  name: 'SfAbstaende',\r\n  data() {\r\n    return {\r\n      numbers: [] as number[][],\r\n      anz_tage: 3,\r\n      seq_numbers: [] as number[][],\r\n      number_set: [] as boolean[][],\r\n      number_seq_set: [] as boolean[][],\r\n      /* ans_wetter enthält die auswahl des wetters durch den benutzer, welches wetter auf die sequenz zutreffen kann */\r\n      ans_wetter: [] as boolean[],  //0 für sonne, 1 für regen, 2 für schnee\r\n      gew_kodierung_seq: 0,   //als sequenz habe ich numbers[gew_kodierung_seq], falls eindeutige lösung.\r\n      antwort: \"\",\r\n      special_gap: 0,   //die stelle in der sequenz, die als lücke erscheint und die die mehrdeutigkeit hervorruft\r\n      normal_gap: 0, //die stelle, die auf die anzahl lösungen keinen einfluss hat\r\n      normal_gap_2: 0,  //falls eindeutig=false, brauchts auch eine weitere stelle, die nicht special_gap ist\r\n      idx_k: 0, //falls nicht eindeutige lösung, dann kommen idx_k und idx_l zum einsatz. siehe notizen bei checkAnswer() für mehr infos\r\n      idx_l: 0,\r\n      submitted: false as boolean,\r\n      result: \"falsch.\",\r\n      eindeutig: true\r\n    }\r\n  },\r\n  created: function(){\r\n    /**\r\n     * Die Idee dieses Programms: \r\n     * Mit 50% wahrscheinlichkeit wird eine aufstellung gewählt wo es eine eindeutige lösung gibt \r\n     * (nachfolgende programmzeile wo this.eindeutig randomly auf true/false gesetzt wird) und mit 50% eine \r\n     * mehrdeutige. \r\n     * Ist eine eindeutige lösung gewählt worden, wird wie in der komponente \"CodesErkennen\" eine aufstlelung der kodierung\r\n     * gewählt, wo ein mindestabstand von 2 gewählt wird. Andernfalls wird das zwar auch gemacht, jedoch wird in\r\n     * der Methode \"createNumbers\" eine kodierung 1 zu 1 zu einer anderen kodierung kopiert und eine einzige\r\n     * stelle (special_gap) wird verändert. Diese special gap wird dann in der zeichenfolge später in der methode \r\n     * \"createSequence\" eine von drei gaps gewählt, zufällig.\r\n     * Somit wird sichergestellt, dass es definitiv mehrere mögliche Lösungen gibt, falls das flag \"this.eindeutig\" falsch ist\r\n     * und im anderen falle sorgt die methode \"no_duplicates\" dafür, dass es ein mindestabstand von 2 eingehalten wird\r\n     * und somit kann eindeutigkeit bewahrt werden, auch wenn eine stelle als lücke gewählt wird.\r\n     */\r\n    this.eindeutig = Math.round(Math.random()) == 1? true : false\r\n    if(this.eindeutig){\r\n      console.log(\"Eindeutige Lösung\")\r\n    } else {console.log(\"Mehrere Lösungen\")}\r\n\r\n    this.createNumbers()\r\n    this.createRandomSequence()\r\n    \r\n    \r\n  },\r\n  methods : {\r\n    translate_ans(answer: string){\r\n      if(answer.charAt(0)=='s'){\r\n        return 0\r\n      } else if(answer.charAt(0)=='b'){\r\n        return 1\r\n      }\r\n    },\r\n    \r\n    submitAnswer(){\r\n      this.submitted = true;\r\n      this.checkAnswer();\r\n    },\r\n    get_numbers_from_ans_wetter(){\r\n      var arr = []\r\n      for(let i = 0; i < 3; i++){\r\n        if(this.ans_wetter[i]){\r\n          arr.push(i)\r\n        }\r\n      }\r\n      return arr\r\n    },\r\n    sort_arr(arr: number[]){\r\n      if(arr.length<=1){\r\n        return arr\r\n      } else{\r\n        var sorted_arr = []\r\n        if(arr[0] > arr[1]){\r\n          sorted_arr.push(arr[1])\r\n          sorted_arr.push(arr[0])\r\n        } else {\r\n          sorted_arr.push(arr[0])\r\n          sorted_arr.push(arr[1])\r\n        }\r\n        return sorted_arr\r\n      }\r\n      \r\n    },\r\n    compare_arrays(arr1: number[], arr2: number[]){   //returns true if arr1 is same as arr2, false otherwise\r\n      if(arr1.length != arr2.length){\r\n        return false;\r\n      } else{\r\n        arr1 = this.sort_arr(arr1)\r\n        arr2 = this.sort_arr(arr2)\r\n        var all_good = true;\r\n        for(let i = 0; i < arr1.length; i++){\r\n          all_good = all_good && (arr1[i]==arr2[i])     //of each element of arr1 and arr2 is the same, then all_good will stay true\r\n        }\r\n        return all_good\r\n      }\r\n    },\r\n    /**\r\n     * gew_kodierung_seq ist die nummer der gewählten kodierung für die sequenz, wobei 0 für sonnig, 1 für regen, 2 für schnee,\r\n     * falls die lösung eindeutig ist. wenn sie nicht eindeutig ist, ist die lösung idx_k und idx_l. beispielsweise idx_k = 0, idx_l = 2,\r\n     * das würde der situation entsprechen, dass es sonne oder schnee haben kann. natürlich wird sichergestellt (bei create_numbers unten)\r\n     * dass dann auch beide darauf passen.\r\n     * was wir hier bei checkAnswer() tun ist: \r\n     */\r\n    checkAnswer(){\r\n      console.log(this.ans_wetter)\r\n      var ausgew_antworten = this.get_numbers_from_ans_wetter()\r\n      console.log(ausgew_antworten)\r\n      var richtige_antworten = []\r\n      if(this.eindeutig){\r\n        richtige_antworten.push(this.gew_kodierung_seq)\r\n      } else{\r\n        richtige_antworten.push(this.idx_k)\r\n        richtige_antworten.push(this.idx_l)\r\n      }\r\n\r\n      var correct = this.compare_arrays(ausgew_antworten,richtige_antworten)\r\n\r\n      if(correct){\r\n        this.result = \"richtig.\"\r\n      } else {\r\n        this.result = \"falsch.\"\r\n      }\r\n    },\r\n    allowDrop(event: any) {\r\n      event.preventDefault();\r\n    },\r\n    translate_code(str: string){\r\n      if(str == \"Es wird sonnig.\"){\r\n        return 1\r\n      } else if(str == \"Es wird regnen.\"){\r\n        return 2\r\n      } else {\r\n        return 3;\r\n      }\r\n    },\r\n    checkAbstand(arr1: number[], arr2: number[]){\r\n      let countAbstand = 0\r\n      for(let i = 0; i < 5; i++){\r\n        if((arr1[i] != arr2[i])){\r\n          countAbstand ++\r\n        }\r\n      }\r\n      return countAbstand\r\n    },\r\n    no_duplicates(){\r\n      //diese methode checkt, ob der abstand zwischen 2 codes mind. mindestAbstand ist, in dem fall return es true, sonst false\r\n      //fine_1 ist true, wenn code 1 und 2 sich an mind. mindestAbstand stelle unterscheiden\r\n      //fine_2 ist true, wenn code 1 und 3 sich an mind. mindestAbstand stelle unterscheiden\r\n      //fine_3 ist true, wenn code 2 und 3 sich an mind. mindestAbstand stelle unterscheiden\r\n      var mindestAbstand = 3\r\n\r\n      let fine_1 = false\r\n      let fine_2 = false\r\n      let fine_3 = false\r\n      \r\n      if(this.checkAbstand(this.numbers[0],this.numbers[1]) >= mindestAbstand){\r\n        fine_1 = true\r\n      }\r\n\r\n      if(this.checkAbstand(this.numbers[0],this.numbers[2]) >= mindestAbstand){\r\n        fine_2 = true\r\n      }\r\n\r\n      if(this.checkAbstand(this.numbers[1],this.numbers[2]) >= mindestAbstand){\r\n        fine_3 = true\r\n      }\r\n\r\n      return fine_1 && fine_2 && fine_3\r\n    },\r\n    \r\n    createNumbers(){\r\n      var aaa = this.checkAbstand([1,1,1],[0,0,1])\r\n      //zuerst wollen wir das array \"numbers\" befüllen\r\n      let new_array_o: number[][]\r\n      do {          //solange die codes nicht verschieden sind, wiederhole folgendes\r\n      console.log(\"codes neu generiert\")\r\n        new_array_o = []\r\n        for(let i = 0; i < 3; i++){\r\n          let new_array = []\r\n          for(let i = 0; i < 5; i++){\r\n            new_array.push(Math.round(Math.random()))\r\n          }\r\n          new_array_o.push(new_array)\r\n        }\r\n        this.numbers = new_array_o\r\n      } while(!(this.no_duplicates()));\r\n\r\n      let k = 0\r\n      let l = 0\r\n      \r\n      if(!this.eindeutig){\r\n        //console.log(this.numbers)\r\n        \r\n        \r\n        while(k == l){\r\n          k = Math.floor((Math.random()*3))\r\n          l = Math.floor((Math.random()*3))\r\n          this.idx_k = k\r\n          this.idx_l = l\r\n        }\r\n        console.assert(k != l)\r\n        console.log(\"folgende Codes sind ähnlich\")\r\n        console.log(\"%d  und  %d\",k+1,l+1)\r\n        console.log(\"unterscheiden sich an folgender stelle:\")\r\n        this.special_gap = Math.floor((Math.random()*5))\r\n        console.log(this.special_gap+1)\r\n        this.normal_gap = Math.floor((Math.random()*5))\r\n        while(this.special_gap == this.normal_gap){     //normal_gap soll ein anderes gap sein als special_gap\r\n          this.normal_gap = Math.floor((Math.random()*5))\r\n        }\r\n\r\n        this.copyArray(this.numbers[k],this.numbers[l])\r\n        if(this.numbers[k][this.special_gap]==1){\r\n          this.numbers[k][this.special_gap] = 0\r\n        } else {\r\n          this.numbers[k][this.special_gap] = 1\r\n        }\r\n        //console.log(this.numbers)\r\n        \r\n        //this.numbers[k][this.special_gap] = (this.numbers[k][this.special_gap] == 0)? 1 : 0\r\n\r\n      }\r\n\r\n      //jetzt das array number_set, das sagt aus, ob eine zahl/eine stelle \r\n      //in den kodierungen bekannt ist oder nicht (für lückentext)\r\n      let new_array_s: boolean[][] = []\r\n      for(let i = 0; i < 3; i++){\r\n        let new_array_ss = []\r\n        for(let i = 0; i < 5; i++){\r\n          new_array_ss.push(true)\r\n        }\r\n        new_array_s.push(new_array_ss)\r\n      }\r\n      this.number_set = new_array_s\r\n      \r\n      //jetzt das array number_seq_set, das sagt aus, ob eine zahl/eine stelle \r\n      //in den sequenzen/zeichenfolge bekannt ist oder nicht (für lückentext)\r\n      let new_array_s_s: boolean[][] = []\r\n      for(let i = 0; i < 3; i++){\r\n        let new_array_ss_s = []\r\n        for(let i = 0; i < 5; i++){\r\n          new_array_ss_s.push(true)\r\n        }\r\n        new_array_s_s.push(new_array_ss_s)\r\n      }\r\n      this.number_seq_set = new_array_s_s\r\n\r\n      if(this.eindeutig){\r\n        this.number_seq_set[0][this.normal_gap] = false\r\n        this.normal_gap_2 = Math.floor((Math.random()*5))\r\n        while(this.normal_gap == this.normal_gap_2){\r\n          this.normal_gap_2 = Math.floor((Math.random()*5))\r\n        }\r\n        this.number_seq_set[0][this.normal_gap_2] = false\r\n      } else {\r\n        this.number_seq_set[0][this.special_gap] = false\r\n        this.number_seq_set[0][this.normal_gap] = false\r\n      }\r\n      \r\n      \r\n    },\r\n    createRandomSequence(){\r\n      this.gew_kodierung_seq = Math.floor((Math.random()*3))\r\n\r\n      if(!this.eindeutig){\r\n        this.gew_kodierung_seq = this.idx_k\r\n      } \r\n      \r\n      this.seq_numbers.push(this.numbers[this.gew_kodierung_seq])\r\n    },\r\n    copyArray(arr1: number[], arr2: number[]){\r\n      for(let i = 0; i < arr1.length; i++){\r\n        arr1[i] = arr2[i]\r\n      }\r\n    }\r\n  }\r\n});\r\n"],"sourceRoot":""}]}