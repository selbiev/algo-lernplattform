{"remainingRequest":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfFehlerhafteFolge.vue?vue&type=style&index=0&id=366444e0&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfFehlerhafteFolge.vue","mtime":1634133882503},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1632349277000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgLkNvZGVzRXJrZW5uZW57DQogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkU1QjI7DQogICAgICAgIHBhZGRpbmc6IDIwcHggMjBweCAyMHB4IDIwcHg7DQogICAgICAgIHdpZHRoOiA4NSU7DQogICAgICAgIGhlaWdodDogYXV0bzsNCiAgICAgICAgYm9yZGVyLWNvbG9yOiBibGFjazsNCiAgICAgICAgYm9yZGVyLXdpZHRoOiA1cHg7DQogICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7DQogICAgICAgIGZvbnQtZmFtaWx5OiBWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjsNCiAgICB9DQoNCiAgICBpbWcgew0KICAgICAgd2lkdGg6IGF1dG87DQogICAgICBoZWlnaHQ6IDUwcHg7DQogICAgfQ0KDQogICAgLmtvZGllcnVuZ2VuIHsNCiAgICAgIC8qYmFja2dyb3VuZC1jb2xvcjogIzdDQzdGRjsqLw0KICAgICAgDQogICAgfQ0KDQogICAgLmtvZGllcnVuZ2VuIGRpdiB7DQogICAgICAvKmFsaWduLWNvbnRlbnQ6IGxlZnQ7DQogICAgICBhbGlnbi1pdGVtczogbGVmdDsNCiAgICAgIHRleHQtYWxpZ246IGxlZnQ7Ki8NCiAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICBwYWRkaW5nOiAxMHB4IDAgMCAxNyU7DQogICAgfQ0KDQogICAgLmJlc2NocmVpYnVuZyB7DQogICAgICB0ZXh0LWFsaWduOiBzdGFydDsNCiAgICAgIHBhZGRpbmc6IDAgMCAwIDE1cHggIWltcG9ydGFudDsNCiAgICB9DQoNCiAgICBpbnB1dCwgc2VsZWN0IHsNCiAgICAgIHBhZGRpbmc6IDEycHggMjBweDsNCiAgICAgIG1hcmdpbjogOHB4IDVweCAwIDA7DQogICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIH0NCg0KICAgIC5hdXN3YWhsX3RhZyB7DQogICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50Ow0KICAgIH0NCg0KICAgIC5hdXN3YWhsIHsNCiAgICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7DQogICAgfQ0KDQogICAgLmNvZGVzIHsNCiAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsNCiAgICAgIA0KICAgIH0NCg0KICAgIC5jb2RlcyBkaXYgew0KICAgICAgcGFkZGluZzogMCAwIDAgMCAhaW1wb3J0YW50Ow0KICAgIH0NCg0KICAgIC56ZWljaGVuZm9sZ2Ugew0KICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50Ow0KICAgICAgZmxleC13cmFwOiB3cmFwOw0KICAgICAgcGFkZGluZzogMCAwIDAgMzUlICFpbXBvcnRhbnQ7DQogICAgfQ0KDQoNCg=="},{"version":3,"sources":["C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfFehlerhafteFolge.vue"],"names":[],"mappings":"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","file":"C:/Users/musli/OneDrive/ETH/bsc_arbeit/code/algo-lernplattform/src/views/SfFehlerhafteFolge.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <div class=\"CodesErkennen\">\r\n      <router-link to=\"/\">Hauptmenü</router-link> <br> <br>\r\n      Biber Bob entscheidet sich, das Wetter mit folgenden Zeichenfolgen zu kodieren: <br>\r\n        \r\n      \r\n      <div class=\"kodierungen\">\r\n        <div class=\"erste-reihe-kodierungen\" > \r\n          <div class=\"codes\">\r\n            <div v-for='index in 5' :key='index' id=\"index\">\r\n              <img v-if=\"numbers[0][index-1] == 0\" src=\"../assets/small-cloud.png\" />\r\n              <img v-else-if=\"numbers[0][index-1] == 1\" src=\"../assets/big-cloud.png\" />\r\n              <img v-else src=\"../assets/empty.png\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"beschreibung\">\r\n            <br />Es wird sonnig.\r\n          </div>\r\n          \r\n        </div>\r\n\r\n        <div class=\"zweite-reihe-kodierungen\">\r\n          <div class=\"codes\">\r\n            <div v-for='index in 5' :key='index'>\r\n              <img v-if=\"numbers[1][index-1] == 0\" src=\"../assets/small-cloud.png\" />\r\n              <img v-else-if=\"numbers[1][index-1] == 1\" src=\"../assets/big-cloud.png\" />\r\n              <img v-else src=\"../assets/empty.png\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"beschreibung\">\r\n            <br />Es wird regnen.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"dritte-reihe-kodierungen\">\r\n          <div class=\"codes\">\r\n            <div v-for='index in 5' :key='index'>\r\n              <img v-if=\"numbers[2][index-1] == 0\" src=\"../assets/small-cloud.png\" />\r\n              <img v-else-if=\"numbers[2][index-1] == 1\" src=\"../assets/big-cloud.png\" />\r\n              <img v-else src=\"../assets/empty.png\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"beschreibung\">\r\n            <br />Es wird schneien.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"vierte-reihe-kodierungen\">\r\n          <div class=\"codes\">\r\n            <div v-for='index in 5' :key='index'>\r\n              <img v-if=\"numbers[3][index-1] == 0\" src=\"../assets/small-cloud.png\" />\r\n              <img v-else-if=\"numbers[3][index-1] == 1\" src=\"../assets/big-cloud.png\" />\r\n              <img v-else src=\"../assets/empty.png\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"beschreibung\">\r\n            <br />Es wird hageln.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <br> Als du Bobs Signale angeschaut hast, hast du eines der Rauchzeichen verwechselt und somit ist die untere Zeichenfolge fehlerhaft. Welche Kodierungen von oben könnte damit gemeint sein? <br> <br>\r\n\r\n      <div class=\"zeichenfolge\">\r\n        <!--<img v-if=\"seq_numbers[0][0] == 0\" src=\"../assets/small-cloud.png\" />\r\n        <img v-if=\"seq_numbers[0][0] == 1\" src=\"../assets/big-cloud.png\" /> -->\r\n\r\n        <div v-for=\"i in 5\" :key=\"i\">\r\n          <img v-if=\"faulty_array[i-1] == 0\" src=\"../assets/small-cloud.png\" />\r\n          <img v-else-if=\"faulty_array[i-1] == 1\" src=\"../assets/big-cloud.png\" />\r\n          <img v-else src=\"../assets/empty.png\" droppable=\"true\" />\r\n        </div>\r\n      </div>\r\n\r\n      <p class=\"antwort\">\r\n        <input type=\"checkbox\" id=\"sonne\" value=\"sonne\" v-model=\"ans_wetter[0]\">\r\n        <label for=\"sonne\">Es wird sonnig.</label> <br>\r\n        <input type=\"checkbox\" id=\"regen\" value=\"regen\" v-model=\"ans_wetter[1]\">\r\n        <label for=\"regen\">Es wird regnen.</label> <br>\r\n        <input type=\"checkbox\" id=\"schnee\" value=\"schnee\" v-model=\"ans_wetter[2]\">\r\n        <label for=\"schnee\">Es wird schneien.</label> <br>\r\n        <input type=\"checkbox\" id=\"hagel\" value=\"hagel\" v-model=\"ans_wetter[3]\">\r\n        <label for=\"hagel\">Es wird hageln.</label> <br>\r\n      </p>\r\n\r\n\r\n\r\n      <form @submit.prevent=\"submitAnswer()\">\r\n        <p>\r\n          <button class=\"btn\" @click=\"submitAnswer()\"\r\n            type=\"button\"\r\n          >\r\n          Prüfe Antwort\r\n          </button>\r\n        </p>\r\n      </form>\r\n\r\n      <p class=\"ans\" v-if=\"submitted\">Die Antwort ist {{result}}</p>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({\r\n  name: 'SfErstellen',\r\n  data() {\r\n    return {\r\n      numbers: [] as number[][],\r\n      submitted: false as boolean,\r\n      result: \"falsch.\",\r\n      faulty_array: [] as number[],\r\n      code_1: 0,\r\n      code_2: 0,\r\n      pos_1: 0,\r\n      pos_2: 0,\r\n      ans_wetter: [false,false,false,false] as boolean[],\r\n    }\r\n  },\r\n  created: function(){\r\n    this.createNumbers()\r\n    this.create4thNumberArray()\r\n  },\r\n  methods : {\r\n    submitAnswer(){\r\n      this.submitted = true\r\n      this.checkAnswer()\r\n    },\r\n    translate_code(str: string){\r\n      if(str == \"Es wird sonnig.\"){\r\n        return 1\r\n      } else if(str == \"Es wird regnen.\"){\r\n        return 2\r\n      } else {\r\n        return 3;\r\n      }\r\n    },\r\n    get_numbers_from_ans_wetter(){\r\n      var arr = []\r\n      for(let i = 0; i < this.ans_wetter.length; i++){\r\n        if(this.ans_wetter[i]){\r\n          arr.push(i)\r\n        }\r\n      }\r\n      return arr\r\n    },\r\n    sort_arr(arr: number[]){\r\n      //precondition: length(arr) € {1,2}\r\n      if(arr.length<=1){\r\n        return arr\r\n      } else{\r\n        var sorted_arr = []\r\n        if(arr[0] > arr[1]){\r\n          sorted_arr.push(arr[1])\r\n          sorted_arr.push(arr[0])\r\n        } else {\r\n          sorted_arr.push(arr[0])\r\n          sorted_arr.push(arr[1])\r\n        }\r\n        return sorted_arr\r\n      }\r\n      \r\n    },\r\n    compare_arrays(arr1: number[], arr2: number[]){   //returns true if arr1 is same as arr2, false otherwise\r\n      if(arr1.length != arr2.length){\r\n        return false;\r\n      } else{\r\n        arr1 = this.sort_arr(arr1)\r\n        arr2 = this.sort_arr(arr2)\r\n        var all_good = true;\r\n        for(let i = 0; i < arr1.length; i++){\r\n          all_good = all_good && (arr1[i]==arr2[i])     //of each element of arr1 and arr2 is the same, then all_good will stay true\r\n        }\r\n        return all_good\r\n      }\r\n    },\r\n    \r\n    checkAnswer(){\r\n      var ausgew_antworten = this.get_numbers_from_ans_wetter()\r\n      var richtige_antworten = [this.code_1,this.code_2]\r\n\r\n      var correct = this.compare_arrays(ausgew_antworten,richtige_antworten)\r\n\r\n      if(correct){\r\n        this.result = \"richtig.\"\r\n      } else {\r\n        this.result = \"falsch.\"\r\n      }\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    checkAbstand(arr1: number[], arr2: number[]){\r\n      let countAbstand = 0\r\n      for(let i = 0; i < 5; i++){\r\n        if((arr1[i] != arr2[i])){\r\n          countAbstand ++\r\n        }\r\n      }\r\n      return countAbstand\r\n    },\r\n\r\n    no_duplicates(){\r\n      //diese methode checkt, ob der abstand zwischen 2 codes mind. mindestAbstand ist, in dem fall return es true, sonst false\r\n      //fine_1 ist true, wenn code 1 und 2 sich an mind. mindestAbstand stelle unterscheiden\r\n      //fine_2 ist true, wenn code 1 und 3 sich an mind. mindestAbstand stelle unterscheiden\r\n      //fine_3 ist true, wenn code 2 und 3 sich an mind. mindestAbstand stelle unterscheiden\r\n      var mindestAbstand = 3\r\n\r\n      let fine_1 = false\r\n      let fine_2 = false\r\n      let fine_3 = false\r\n      \r\n      if(this.checkAbstand(this.numbers[0],this.numbers[1]) >= mindestAbstand){\r\n        fine_1 = true\r\n      }\r\n\r\n      if(this.checkAbstand(this.numbers[0],this.numbers[2]) >= mindestAbstand){\r\n        fine_2 = true\r\n      }\r\n\r\n      if(this.checkAbstand(this.numbers[1],this.numbers[2]) >= mindestAbstand){\r\n        fine_3 = true\r\n      }\r\n\r\n      return fine_1 && fine_2 && fine_3\r\n    },\r\n    \r\n    createNumbers(){\r\n      //zuerst wollen wir das array \"numbers\" befüllen\r\n      let new_array_o: number[][]\r\n      do {          //solange die codes nicht verschieden sind, wiederhole folgendes\r\n        console.log('duplikat gefunden, codes neu generiert')\r\n        new_array_o = []\r\n        for(let i = 0; i < 3; i++){\r\n          let new_array = []\r\n          for(let i = 0; i < 5; i++){\r\n            new_array.push(Math.round(Math.random()))\r\n          }\r\n          new_array_o.push(new_array)\r\n        }\r\n        this.numbers = new_array_o\r\n      } while(!(this.no_duplicates()));\r\n    },\r\n    create4thNumberArray(){\r\n      var idx_of_seq_to_replace = Math.floor((Math.random()*3))   //wähle zufällige stelle s \\in {0,1,2}\r\n      this.numbers.push(this.copyArray(this.numbers[idx_of_seq_to_replace]))      //füge am ende von this.numbers den s-ten array aus this.numbers an\r\n      \r\n      //mache 2 stellen k und l sodass k != l. an diesen stellen vertauschen wir die bits, sodass sich\r\n      //this.numbers[k] und this.numbers[l] an 2 stellen unterscheiden.\r\n      var k = Math.floor((Math.random()*5))\r\n      var l = Math.floor((Math.random()*5))\r\n      while(k == l){    //wichtig, dass k nicht gleich l ist\r\n        var l = Math.floor((Math.random()*5))\r\n      }\r\n\r\n      this.numbers[3][k] = (this.numbers[idx_of_seq_to_replace][k] == 1)? 0 : 1   //if in numbers[idx...] == 1, then 0 else 1 \r\n      this.faulty_array = this.copyArray(this.numbers[3])\r\n      this.numbers[3][l] = (this.numbers[idx_of_seq_to_replace][l] == 1)? 0 : 1\r\n\r\n      //jetzt haben wir zwei codes (nämlich numbers[idx_of_....] und numbers[3]), die sich an 2 stellen unterscheiden\r\n\r\n      this.code_1 = idx_of_seq_to_replace\r\n      this.code_2 = 3\r\n      this.pos_1 = k\r\n      this.pos_2 = l\r\n\r\n      this.shuffleNumbers()\r\n\r\n      console.log(\"k: %d;   l: %d\", k, l)\r\n      console.log(\"codes %d und %d unterscheiden sich an 2 stellen\", this.code_1, this.code_2)\r\n      console.log(this.numbers)\r\n      console.log(this.faulty_array)\r\n    },\r\n    shuffleNumbers(){\r\n      //ziel: code_1 und code_2 beide an zufällige positionen s und t (s != t) verschieben\r\n      //das stellt sicher, dass die zielcodes nicht immer an denselben stellen sind\r\n      var tmp_arr_0 = this.copyArray(this.numbers[0])\r\n      var tmp_arr_1 = this.copyArray(this.numbers[1])\r\n      var tmp_arr_2 = this.copyArray(this.numbers[2])\r\n      var tmp_arr_3 = this.copyArray(this.numbers[3])\r\n      \r\n      var permuted_positions = this.permutation()\r\n      this.code_1 = permuted_positions[this.code_1]   //update code_1 gem. permutation\r\n      this.code_2 = permuted_positions[this.code_2]   //update code_2 gem. permutation\r\n\r\n      this.numbers = []\r\n      this.numbers[permuted_positions[0]] = tmp_arr_0\r\n      this.numbers[permuted_positions[1]] = tmp_arr_1\r\n      this.numbers[permuted_positions[2]] = tmp_arr_2\r\n      this.numbers[permuted_positions[3]] = tmp_arr_3\r\n    },\r\n    permutation(){\r\n      var current_positions = [0,1,2,3]\r\n      var first = Math.floor((Math.random()*4))\r\n      var second = Math.floor((Math.random()*4))\r\n      while(first == second){\r\n        second = Math.floor((Math.random()*4))\r\n      }\r\n      var third = Math.floor((Math.random()*4))\r\n      while(third == first || third == second){\r\n        third = Math.floor((Math.random()*4))\r\n      }\r\n      var fourth = Math.floor((Math.random()*4))\r\n      while(fourth == first || fourth == second || fourth == third){\r\n        fourth = Math.floor((Math.random()*4))\r\n      }\r\n      current_positions[0] = first\r\n      current_positions[1] = second\r\n      current_positions[2] = third\r\n      current_positions[3] = fourth\r\n\r\n      console.log(\"permutation start\")\r\n      console.log(current_positions)\r\n      console.log(\"permutation finish\")\r\n      return current_positions\r\n    },\r\n    copyArray(arr1: number[]){\r\n      var newArr = []\r\n      for(let i = 0; i < arr1.length; i++){\r\n        newArr[i] = arr1[i]\r\n      }\r\n      return newArr\r\n    }\r\n  }\r\n});\r\n</script>\r\n\r\n\r\n<style scoped>\r\n    .CodesErkennen{\r\n        background-color: #FFE5B2;\r\n        padding: 20px 20px 20px 20px;\r\n        width: 85%;\r\n        height: auto;\r\n        border-color: black;\r\n        border-width: 5px;\r\n        border-style: solid;\r\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    }\r\n\r\n    img {\r\n      width: auto;\r\n      height: 50px;\r\n    }\r\n\r\n    .kodierungen {\r\n      /*background-color: #7CC7FF;*/\r\n      \r\n    }\r\n\r\n    .kodierungen div {\r\n      /*align-content: left;\r\n      align-items: left;\r\n      text-align: left;*/\r\n      display: flex;\r\n      padding: 10px 0 0 17%;\r\n    }\r\n\r\n    .beschreibung {\r\n      text-align: start;\r\n      padding: 0 0 0 15px !important;\r\n    }\r\n\r\n    input, select {\r\n      padding: 12px 20px;\r\n      margin: 8px 5px 0 0;\r\n      box-sizing: border-box;\r\n      text-align: center;\r\n    }\r\n\r\n    .auswahl_tag {\r\n      display: block !important;\r\n    }\r\n\r\n    .auswahl {\r\n      display: block !important;\r\n    }\r\n\r\n    .codes {\r\n      display: flex !important;\r\n      \r\n    }\r\n\r\n    .codes div {\r\n      padding: 0 0 0 0 !important;\r\n    }\r\n\r\n    .zeichenfolge {\r\n      display: flex !important;\r\n      flex-wrap: wrap;\r\n      padding: 0 0 0 35% !important;\r\n    }\r\n\r\n\r\n</style>"]}]}