{"remainingRequest":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfAnzahlLoesungen_schwer.vue?vue&type=template&id=601b57ec&scoped=true&ts=true","dependencies":[{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfAnzahlLoesungen_schwer.vue","mtime":1634121887615},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1632349277000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgPGRpdiBjbGFzcz0iQ29kZXNBbnphaGxMb2VzdW5nZW4iPiAgDQogICAgICA8cm91dGVyLWxpbmsgdG89Ii8iPkhhdXB0bWVuw7w8L3JvdXRlci1saW5rPiA8YnI+IDxicj4NCiAgICAgIEJpYmVyIEJvYiBzZW5kZXQgZm9sZ2VuZGUgUmF1Y2h6ZWljaGVuLCB1bSBkYXMgV2V0dGVyIGbDvHIgZWluZW4gVGFnIHZvcmF1c3p1c2FnZW4uIDxicj4NCiAgICAgICAgPCEtLSBBdXRvbWF0aXNpZXJ0ZSBWZXJzaW9uLCBtYW4gbXVzcyBlaW5mYWNoIGRlbiBjc3Mgbm9jaCBhbnBhc3NlbiAtLT4NCiAgICAgICAgDQogICAgICANCiAgICAgIDxkaXYgY2xhc3M9ImtvZGllcnVuZ2VuIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iZXJzdGUtcmVpaGUta29kaWVydW5nZW4iID4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2RlcyI+DQogICAgICAgICAgICA8ZGl2IHYtZm9yPSdpbmRleCBpbiA1JyA6a2V5PSdpbmRleCc+DQogICAgICAgICAgICAgIDxpbWcgdi1pZj0ibnVtYmVyc1swXVtpbmRleC0xXSA9PSAwICYmIG51bWJlcl9zZXRbMF1baW5kZXgtMV0iIHNyYz0iLi4vYXNzZXRzL3NtYWxsLWNsb3VkLnBuZyIgLz4NCiAgICAgICAgICAgICAgPGltZyB2LWVsc2UtaWY9Im51bWJlcnNbMF1baW5kZXgtMV0gPT0gMSAmJiBudW1iZXJfc2V0WzBdW2luZGV4LTFdIiBzcmM9Ii4uL2Fzc2V0cy9iaWctY2xvdWQucG5nIiAvPg0KICAgICAgICAgICAgICA8aW1nIHYtZWxzZSBzcmM9Ii4uL2Fzc2V0cy9lbXB0eS5wbmciIC8+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImJlc2NocmVpYnVuZyI+DQogICAgICAgICAgICA8YnIgLz5FcyB3aXJkIHNvbm5pZy4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICANCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iendlaXRlLXJlaWhlLWtvZGllcnVuZ2VuIj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2RlcyI+DQogICAgICAgICAgICA8ZGl2IHYtZm9yPSdpbmRleCBpbiA1JyA6a2V5PSdpbmRleCc+DQogICAgICAgICAgICAgIDxpbWcgdi1pZj0ibnVtYmVyc1sxXVtpbmRleC0xXSA9PSAwICYmIG51bWJlcl9zZXRbMV1baW5kZXgtMV0iIHNyYz0iLi4vYXNzZXRzL3NtYWxsLWNsb3VkLnBuZyIgLz4NCiAgICAgICAgICAgICAgPGltZyB2LWVsc2UtaWY9Im51bWJlcnNbMV1baW5kZXgtMV0gPT0gMSAmJiBudW1iZXJfc2V0WzFdW2luZGV4LTFdIiBzcmM9Ii4uL2Fzc2V0cy9iaWctY2xvdWQucG5nIiAvPg0KICAgICAgICAgICAgICA8aW1nIHYtZWxzZSBzcmM9Ii4uL2Fzc2V0cy9lbXB0eS5wbmciIC8+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImJlc2NocmVpYnVuZyI+DQogICAgICAgICAgICA8YnIgLz5FcyB3aXJkIHJlZ25lbi4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iZHJpdHRlLXJlaWhlLWtvZGllcnVuZ2VuIj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2RlcyI+DQogICAgICAgICAgICA8ZGl2IHYtZm9yPSdpbmRleCBpbiA1JyA6a2V5PSdpbmRleCc+DQogICAgICAgICAgICAgIDxpbWcgdi1pZj0ibnVtYmVyc1syXVtpbmRleC0xXSA9PSAwICYmIG51bWJlcl9zZXRbMl1baW5kZXgtMV0iIHNyYz0iLi4vYXNzZXRzL3NtYWxsLWNsb3VkLnBuZyIgLz4NCiAgICAgICAgICAgICAgPGltZyB2LWVsc2UtaWY9Im51bWJlcnNbMl1baW5kZXgtMV0gPT0gMSAmJiBudW1iZXJfc2V0WzJdW2luZGV4LTFdIiBzcmM9Ii4uL2Fzc2V0cy9iaWctY2xvdWQucG5nIiAvPg0KICAgICAgICAgICAgICA8aW1nIHYtZWxzZSBzcmM9Ii4uL2Fzc2V0cy9lbXB0eS5wbmciIC8+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImJlc2NocmVpYnVuZyI+DQogICAgICAgICAgICA8YnIgLz5FcyB3aXJkIHNjaG5laWVuLg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KICAgICAgDQogICAgICANCiAgICAgIDxiciAvPkJvYiBoYXQgZGFzIFdldHRlciBmw7xyIG1vcmdlbiBtaXQgZGVuIG5hY2hmb2xnZW5kZW4gWmVpY2hlbiB2b3JhdXNnZXNhZ3QuIA0KICAgICAgV2VsY2hlcyBXZXR0ZXIga8O2bm50ZSBCb2IgZ2VtZWludCBoYWJlbj8gS3JldXplIGVpbnMgb2RlciBtZWhyZXJlIGFuLiA8YnIgLz4gPGJyIC8+DQoNCiAgICAgIDxkaXYgY2xhc3M9InplaWNoZW5mb2xnZSI+DQogICAgICAgIDwhLS08aW1nIHYtaWY9InNlcV9udW1iZXJzWzBdWzBdID09IDAiIHNyYz0iLi4vYXNzZXRzL3NtYWxsLWNsb3VkLnBuZyIgLz4NCiAgICAgICAgPGltZyB2LWlmPSJzZXFfbnVtYmVyc1swXVswXSA9PSAxIiBzcmM9Ii4uL2Fzc2V0cy9iaWctY2xvdWQucG5nIiAvPiAtLT4NCg0KICAgICAgICA8ZGl2IHYtZm9yPSJpIGluIDUiIDprZXk9ImkiPg0KICAgICAgICAgIDxpbWcgdi1pZj0ic2VxX251bWJlcnNbMF1baS0xXSA9PSAwICYmIG51bWJlcl9zZXFfc2V0WzBdW2ktMV0iIHNyYz0iLi4vYXNzZXRzL3NtYWxsLWNsb3VkLnBuZyIgLz4NCiAgICAgICAgICA8aW1nIHYtZWxzZS1pZj0ic2VxX251bWJlcnNbMF1baS0xXSA9PSAxICYmIG51bWJlcl9zZXFfc2V0WzBdW2ktMV0iIHNyYz0iLi4vYXNzZXRzL2JpZy1jbG91ZC5wbmciIC8+DQogICAgICAgICAgPGRpdiB2LWVsc2UgZHJvcHBhYmxlPSJ0cnVlIiBjbGFzcz0iZHJvcC1zbG90IiBpZD0iZHJvcC1zbG90LTEiICBAZHJhZ292ZXI9ImFsbG93RHJvcCgkZXZlbnQpIi8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxwIGNsYXNzPSJhbnR3b3J0Ij4NCiAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic29ubmUiIHZhbHVlPSJKYWNrIiB2LW1vZGVsPSJhbnNfd2V0dGVyWzBdIj4NCiAgICAgICAgPGxhYmVsIGZvcj0ic29ubmUiPkVzIHdpcmQgc29ubmlnLjwvbGFiZWw+IDxicj4NCiAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0icmVnZW4iIHZhbHVlPSJKb2huIiB2LW1vZGVsPSJhbnNfd2V0dGVyWzFdIj4NCiAgICAgICAgPGxhYmVsIGZvcj0icmVnZW4iPkVzIHdpcmQgcmVnbmVuLjwvbGFiZWw+IDxicj4NCiAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2NobmVlIiB2YWx1ZT0iTWlrZSIgdi1tb2RlbD0iYW5zX3dldHRlclsyXSI+DQogICAgICAgIDxsYWJlbCBmb3I9InNjaG5lZSI+RXMgd2lyZCBzY2huZWllbi48L2xhYmVsPiA8YnI+DQogICAgICA8L3A+DQoNCiAgICAgICA8cD4NCiAgICAgICAgICA8YnV0dG9uIEBjbGljaz0ic3VibWl0QW5zd2VyKCkiIHR5cGU9ImJ1dHRvbiIgPg0KICAgICAgICAgIFByw7xmZSBBbnR3b3J0DQogICAgICAgICAgPC9idXR0b24+DQogICAgICAgIDwvcD4NCiAgICAgIDwhLS08aW1nIGlkPSJyZW1vdmUiIHNyYz0iLi4vYXNzZXRzL3JlbW92ZS5wbmciIEBkcmFnb3Zlcj0iYWxsb3dEcm9wKCRldmVudCkiIEBkcm9wPSJkcm9wKCRldmVudCwgJzEnKSIgd2lkdGg9IjMzNiIgaGVpZ2h0PSI2OSI+LS0+DQogICAgPHAgdi1pZj0ic3VibWl0dGVkIj5EaWUgQW50d29ydCBpc3Qge3tyZXN1bHR9fTwvcD4NCiAgICA8L2Rpdj4NCg=="},{"version":3,"sources":["C:\\Users\\musli\\OneDrive\\ETH\\bsc_arbeit\\code\\algo-lernplattform\\src\\views\\SfAnzahlLoesungen_schwer.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACpD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;;MAGxE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;UACnC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAClC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;cAChG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;cACnG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACzC,CAAC,CAAC,CAAC,CAAC,CAAC;UACP,CAAC,CAAC,CAAC,CAAC,CAAC;;UAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACtB,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEP,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACnC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAClC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;cAChG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;cACnG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACzC,CAAC,CAAC,CAAC,CAAC,CAAC;UACP,CAAC,CAAC,CAAC,CAAC,CAAC;;UAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;;MAElF,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACxE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;QAEthG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;UACnG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEL,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACttvE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACnD,CAAC,CAAC,CAAC;;OAEF,CAAC,CAAC;UACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;UAC9C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACV,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/musli/OneDrive/ETH/bsc_arbeit/code/algo-lernplattform/src/views/SfAnzahlLoesungen_schwer.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <div class=\"CodesAnzahlLoesungen\">  \r\n      <router-link to=\"/\">Hauptmenü</router-link> <br> <br>\r\n      Biber Bob sendet folgende Rauchzeichen, um das Wetter für einen Tag vorauszusagen. <br>\r\n        <!-- Automatisierte Version, man muss einfach den css noch anpassen -->\r\n        \r\n      \r\n      <div class=\"kodierungen\">\r\n        <div class=\"erste-reihe-kodierungen\" >\r\n          <div class=\"codes\">\r\n            <div v-for='index in 5' :key='index'>\r\n              <img v-if=\"numbers[0][index-1] == 0 && number_set[0][index-1]\" src=\"../assets/small-cloud.png\" />\r\n              <img v-else-if=\"numbers[0][index-1] == 1 && number_set[0][index-1]\" src=\"../assets/big-cloud.png\" />\r\n              <img v-else src=\"../assets/empty.png\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"beschreibung\">\r\n            <br />Es wird sonnig.\r\n          </div>\r\n          \r\n        </div>\r\n\r\n        <div class=\"zweite-reihe-kodierungen\">\r\n          <div class=\"codes\">\r\n            <div v-for='index in 5' :key='index'>\r\n              <img v-if=\"numbers[1][index-1] == 0 && number_set[1][index-1]\" src=\"../assets/small-cloud.png\" />\r\n              <img v-else-if=\"numbers[1][index-1] == 1 && number_set[1][index-1]\" src=\"../assets/big-cloud.png\" />\r\n              <img v-else src=\"../assets/empty.png\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"beschreibung\">\r\n            <br />Es wird regnen.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"dritte-reihe-kodierungen\">\r\n          <div class=\"codes\">\r\n            <div v-for='index in 5' :key='index'>\r\n              <img v-if=\"numbers[2][index-1] == 0 && number_set[2][index-1]\" src=\"../assets/small-cloud.png\" />\r\n              <img v-else-if=\"numbers[2][index-1] == 1 && number_set[2][index-1]\" src=\"../assets/big-cloud.png\" />\r\n              <img v-else src=\"../assets/empty.png\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"beschreibung\">\r\n            <br />Es wird schneien.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      \r\n      <br />Bob hat das Wetter für morgen mit den nachfolgenden Zeichen vorausgesagt. \r\n      Welches Wetter könnte Bob gemeint haben? Kreuze eins oder mehrere an. <br /> <br />\r\n\r\n      <div class=\"zeichenfolge\">\r\n        <!--<img v-if=\"seq_numbers[0][0] == 0\" src=\"../assets/small-cloud.png\" />\r\n        <img v-if=\"seq_numbers[0][0] == 1\" src=\"../assets/big-cloud.png\" /> -->\r\n\r\n        <div v-for=\"i in 5\" :key=\"i\">\r\n          <img v-if=\"seq_numbers[0][i-1] == 0 && number_seq_set[0][i-1]\" src=\"../assets/small-cloud.png\" />\r\n          <img v-else-if=\"seq_numbers[0][i-1] == 1 && number_seq_set[0][i-1]\" src=\"../assets/big-cloud.png\" />\r\n          <div v-else droppable=\"true\" class=\"drop-slot\" id=\"drop-slot-1\"  @dragover=\"allowDrop($event)\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <p class=\"antwort\">\r\n        <input type=\"checkbox\" id=\"sonne\" value=\"Jack\" v-model=\"ans_wetter[0]\">\r\n        <label for=\"sonne\">Es wird sonnig.</label> <br>\r\n        <input type=\"checkbox\" id=\"regen\" value=\"John\" v-model=\"ans_wetter[1]\">\r\n        <label for=\"regen\">Es wird regnen.</label> <br>\r\n        <input type=\"checkbox\" id=\"schnee\" value=\"Mike\" v-model=\"ans_wetter[2]\">\r\n        <label for=\"schnee\">Es wird schneien.</label> <br>\r\n      </p>\r\n\r\n       <p>\r\n          <button @click=\"submitAnswer()\" type=\"button\" >\r\n          Prüfe Antwort\r\n          </button>\r\n        </p>\r\n      <!--<img id=\"remove\" src=\"../assets/remove.png\" @dragover=\"allowDrop($event)\" @drop=\"drop($event, '1')\" width=\"336\" height=\"69\">-->\r\n    <p v-if=\"submitted\">Die Antwort ist {{result}}</p>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({\r\n  name: 'SfAbstaende',\r\n  data() {\r\n    return {\r\n      numbers: [] as number[][],\r\n      anz_tage: 3,\r\n      seq_numbers: [] as number[][],\r\n      number_set: [] as boolean[][],\r\n      number_seq_set: [] as boolean[][],\r\n      /* ans_wetter enthält die auswahl des wetters durch den benutzer, welches wetter auf die sequenz zutreffen kann */\r\n      ans_wetter: [] as boolean[],  //0 für sonne, 1 für regen, 2 für schnee\r\n      gew_kodierung_seq: 0,   //als sequenz habe ich numbers[gew_kodierung_seq], falls eindeutige lösung.\r\n      antwort: \"\",\r\n      special_gap: 0,   //die stelle in der sequenz, die als lücke erscheint und die die mehrdeutigkeit hervorruft\r\n      normal_gap: 0, //die stelle, die auf die anzahl lösungen keinen einfluss hat\r\n      normal_gap_2: 0,  //falls eindeutig=false, brauchts auch eine weitere stelle, die nicht special_gap ist\r\n      idx_k: 0, //falls nicht eindeutige lösung, dann kommen idx_k und idx_l zum einsatz. siehe notizen bei checkAnswer() für mehr infos\r\n      idx_l: 0,\r\n      submitted: false as boolean,\r\n      result: \"falsch.\",\r\n      eindeutig: true\r\n    }\r\n  },\r\n  created: function(){\r\n    /**\r\n     * Die Idee dieses Programms: \r\n     * Mit 50% wahrscheinlichkeit wird eine aufstellung gewählt wo es eine eindeutige lösung gibt \r\n     * (nachfolgende programmzeile wo this.eindeutig randomly auf true/false gesetzt wird) und mit 50% eine \r\n     * mehrdeutige. \r\n     * Ist eine eindeutige lösung gewählt worden, wird wie in der komponente \"CodesErkennen\" eine aufstlelung der kodierung\r\n     * gewählt, wo ein mindestabstand von 2 gewählt wird. Andernfalls wird das zwar auch gemacht, jedoch wird in\r\n     * der Methode \"createNumbers\" eine kodierung 1 zu 1 zu einer anderen kodierung kopiert und eine einzige\r\n     * stelle (special_gap) wird verändert. Diese special gap wird dann in der zeichenfolge später in der methode \r\n     * \"createSequence\" eine von drei gaps gewählt, zufällig.\r\n     * Somit wird sichergestellt, dass es definitiv mehrere mögliche Lösungen gibt, falls das flag \"this.eindeutig\" falsch ist\r\n     * und im anderen falle sorgt die methode \"no_duplicates\" dafür, dass es ein mindestabstand von 2 eingehalten wird\r\n     * und somit kann eindeutigkeit bewahrt werden, auch wenn eine stelle als lücke gewählt wird.\r\n     */\r\n    this.eindeutig = Math.round(Math.random()) == 1? true : false\r\n    if(this.eindeutig){\r\n      console.log(\"Eindeutige Lösung\")\r\n    } else {console.log(\"Mehrere Lösungen\")}\r\n\r\n    this.createNumbers()\r\n    this.createRandomSequence()\r\n    \r\n    \r\n  },\r\n  methods : {\r\n    translate_ans(answer: string){\r\n      if(answer.charAt(0)=='s'){\r\n        return 0\r\n      } else if(answer.charAt(0)=='b'){\r\n        return 1\r\n      }\r\n    },\r\n    \r\n    submitAnswer(){\r\n      this.submitted = true;\r\n      this.checkAnswer();\r\n    },\r\n    get_numbers_from_ans_wetter(){\r\n      var arr = []\r\n      for(let i = 0; i < 3; i++){\r\n        if(this.ans_wetter[i]){\r\n          arr.push(i)\r\n        }\r\n      }\r\n      return arr\r\n    },\r\n    sort_arr(arr: number[]){\r\n      if(arr.length<=1){\r\n        return arr\r\n      } else{\r\n        var sorted_arr = []\r\n        if(arr[0] > arr[1]){\r\n          sorted_arr.push(arr[1])\r\n          sorted_arr.push(arr[0])\r\n        } else {\r\n          sorted_arr.push(arr[0])\r\n          sorted_arr.push(arr[1])\r\n        }\r\n        return sorted_arr\r\n      }\r\n      \r\n    },\r\n    compare_arrays(arr1: number[], arr2: number[]){   //returns true if arr1 is same as arr2, false otherwise\r\n      if(arr1.length != arr2.length){\r\n        return false;\r\n      } else{\r\n        arr1 = this.sort_arr(arr1)\r\n        arr2 = this.sort_arr(arr2)\r\n        var all_good = true;\r\n        for(let i = 0; i < arr1.length; i++){\r\n          all_good = all_good && (arr1[i]==arr2[i])     //of each element of arr1 and arr2 is the same, then all_good will stay true\r\n        }\r\n        return all_good\r\n      }\r\n    },\r\n    /**\r\n     * gew_kodierung_seq ist die nummer der gewählten kodierung für die sequenz, wobei 0 für sonnig, 1 für regen, 2 für schnee,\r\n     * falls die lösung eindeutig ist. wenn sie nicht eindeutig ist, ist die lösung idx_k und idx_l. beispielsweise idx_k = 0, idx_l = 2,\r\n     * das würde der situation entsprechen, dass es sonne oder schnee haben kann. natürlich wird sichergestellt (bei create_numbers unten)\r\n     * dass dann auch beide darauf passen.\r\n     * was wir hier bei checkAnswer() tun ist: \r\n     */\r\n    checkAnswer(){\r\n      console.log(this.ans_wetter)\r\n      var ausgew_antworten = this.get_numbers_from_ans_wetter()\r\n      console.log(ausgew_antworten)\r\n      var richtige_antworten = []\r\n      if(this.eindeutig){\r\n        richtige_antworten.push(this.gew_kodierung_seq)\r\n      } else{\r\n        richtige_antworten.push(this.idx_k)\r\n        richtige_antworten.push(this.idx_l)\r\n      }\r\n\r\n      var correct = this.compare_arrays(ausgew_antworten,richtige_antworten)\r\n\r\n      if(correct){\r\n        this.result = \"richtig.\"\r\n      } else {\r\n        this.result = \"falsch.\"\r\n      }\r\n    },\r\n    allowDrop(event: any) {\r\n      event.preventDefault();\r\n    },\r\n    translate_code(str: string){\r\n      if(str == \"Es wird sonnig.\"){\r\n        return 1\r\n      } else if(str == \"Es wird regnen.\"){\r\n        return 2\r\n      } else {\r\n        return 3;\r\n      }\r\n    },\r\n    checkAbstand(arr1: number[], arr2: number[]){\r\n      let countAbstand = 0\r\n      for(let i = 0; i < 5; i++){\r\n        if((arr1[i] != arr2[i])){\r\n          countAbstand ++\r\n        }\r\n      }\r\n      return countAbstand\r\n    },\r\n    no_duplicates(){\r\n      //diese methode checkt, ob der abstand zwischen 2 codes mind. mindestAbstand ist, in dem fall return es true, sonst false\r\n      //fine_1 ist true, wenn code 1 und 2 sich an mind. mindestAbstand stelle unterscheiden\r\n      //fine_2 ist true, wenn code 1 und 3 sich an mind. mindestAbstand stelle unterscheiden\r\n      //fine_3 ist true, wenn code 2 und 3 sich an mind. mindestAbstand stelle unterscheiden\r\n      var mindestAbstand = 3\r\n\r\n      let fine_1 = false\r\n      let fine_2 = false\r\n      let fine_3 = false\r\n      \r\n      if(this.checkAbstand(this.numbers[0],this.numbers[1]) >= mindestAbstand){\r\n        fine_1 = true\r\n      }\r\n\r\n      if(this.checkAbstand(this.numbers[0],this.numbers[2]) >= mindestAbstand){\r\n        fine_2 = true\r\n      }\r\n\r\n      if(this.checkAbstand(this.numbers[1],this.numbers[2]) >= mindestAbstand){\r\n        fine_3 = true\r\n      }\r\n\r\n      return fine_1 && fine_2 && fine_3\r\n    },\r\n    \r\n    createNumbers(){\r\n      var aaa = this.checkAbstand([1,1,1],[0,0,1])\r\n      //zuerst wollen wir das array \"numbers\" befüllen\r\n      let new_array_o: number[][]\r\n      do {          //solange die codes nicht verschieden sind, wiederhole folgendes\r\n      console.log(\"codes neu generiert\")\r\n        new_array_o = []\r\n        for(let i = 0; i < 3; i++){\r\n          let new_array = []\r\n          for(let i = 0; i < 5; i++){\r\n            new_array.push(Math.round(Math.random()))\r\n          }\r\n          new_array_o.push(new_array)\r\n        }\r\n        this.numbers = new_array_o\r\n      } while(!(this.no_duplicates()));\r\n\r\n      let k = 0\r\n      let l = 0\r\n      \r\n      if(!this.eindeutig){\r\n        //console.log(this.numbers)\r\n        \r\n        \r\n        while(k == l){\r\n          k = Math.floor((Math.random()*3))\r\n          l = Math.floor((Math.random()*3))\r\n          this.idx_k = k\r\n          this.idx_l = l\r\n        }\r\n        console.assert(k != l)\r\n        console.log(\"folgende Codes sind ähnlich\")\r\n        console.log(\"%d  und  %d\",k+1,l+1)\r\n        console.log(\"unterscheiden sich an folgender stelle:\")\r\n        this.special_gap = Math.floor((Math.random()*5))\r\n        console.log(this.special_gap+1)\r\n        this.normal_gap = Math.floor((Math.random()*5))\r\n        while(this.special_gap == this.normal_gap){     //normal_gap soll ein anderes gap sein als special_gap\r\n          this.normal_gap = Math.floor((Math.random()*5))\r\n        }\r\n\r\n        this.copyArray(this.numbers[k],this.numbers[l])\r\n        if(this.numbers[k][this.special_gap]==1){\r\n          this.numbers[k][this.special_gap] = 0\r\n        } else {\r\n          this.numbers[k][this.special_gap] = 1\r\n        }\r\n        //console.log(this.numbers)\r\n        \r\n        //this.numbers[k][this.special_gap] = (this.numbers[k][this.special_gap] == 0)? 1 : 0\r\n\r\n      }\r\n\r\n      //jetzt das array number_set, das sagt aus, ob eine zahl/eine stelle \r\n      //in den kodierungen bekannt ist oder nicht (für lückentext)\r\n      let new_array_s: boolean[][] = []\r\n      for(let i = 0; i < 3; i++){\r\n        let new_array_ss = []\r\n        for(let i = 0; i < 5; i++){\r\n          new_array_ss.push(true)\r\n        }\r\n        new_array_s.push(new_array_ss)\r\n      }\r\n      this.number_set = new_array_s\r\n      \r\n      //jetzt das array number_seq_set, das sagt aus, ob eine zahl/eine stelle \r\n      //in den sequenzen/zeichenfolge bekannt ist oder nicht (für lückentext)\r\n      let new_array_s_s: boolean[][] = []\r\n      for(let i = 0; i < 3; i++){\r\n        let new_array_ss_s = []\r\n        for(let i = 0; i < 5; i++){\r\n          new_array_ss_s.push(true)\r\n        }\r\n        new_array_s_s.push(new_array_ss_s)\r\n      }\r\n      this.number_seq_set = new_array_s_s\r\n\r\n      if(this.eindeutig){\r\n        this.number_seq_set[0][this.normal_gap] = false\r\n        this.normal_gap_2 = Math.floor((Math.random()*5))\r\n        while(this.normal_gap == this.normal_gap_2){\r\n          this.normal_gap_2 = Math.floor((Math.random()*5))\r\n        }\r\n        this.number_seq_set[0][this.normal_gap_2] = false\r\n      } else {\r\n        this.number_seq_set[0][this.special_gap] = false\r\n        this.number_seq_set[0][this.normal_gap] = false\r\n      }\r\n      \r\n      \r\n    },\r\n    createRandomSequence(){\r\n      this.gew_kodierung_seq = Math.floor((Math.random()*3))\r\n\r\n      if(!this.eindeutig){\r\n        this.gew_kodierung_seq = this.idx_k\r\n      } \r\n      \r\n      this.seq_numbers.push(this.numbers[this.gew_kodierung_seq])\r\n    },\r\n    copyArray(arr1: number[], arr2: number[]){\r\n      for(let i = 0; i < arr1.length; i++){\r\n        arr1[i] = arr2[i]\r\n      }\r\n    }\r\n  }\r\n});\r\n</script>\r\n\r\n\r\n<style scoped>\r\n    .CodesAnzahlLoesungen{\r\n        background-color: #FFE5B2;\r\n        padding: 20px 20px 20px 20px;\r\n        width: 85%;\r\n        height: auto;\r\n        border-color: black;\r\n        border-width: 5px;\r\n        border-style: solid;\r\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    }\r\n\r\n    img {\r\n      width: auto;\r\n      height: 50px;\r\n    }\r\n\r\n    .kodierungen {\r\n      /*background-color: #7CC7FF;*/\r\n      \r\n    }\r\n\r\n    .kodierungen div {\r\n      /*align-content: left;\r\n      align-items: left;\r\n      text-align: left;*/\r\n      display: flex;\r\n      padding: 10px 0 0 17%;\r\n    }\r\n\r\n    .beschreibung {\r\n      text-align: start;\r\n      padding: 0 0 0 15px !important;\r\n    }\r\n\r\n    input, select {\r\n      padding: 12px 20px;\r\n      margin: 8px 5px 0 0;\r\n      box-sizing: border-box;\r\n      text-align: center;\r\n    }\r\n\r\n    .auswahl_tag {\r\n      display: block !important;\r\n    }\r\n\r\n    .auswahl {\r\n      display: flex !important;\r\n      padding: 3px 3px 3px 25%;\r\n    }\r\n\r\n    .codes {\r\n      display: flex !important;\r\n      \r\n    }\r\n\r\n    .codes div {\r\n      padding: 0 0 0 0 !important;\r\n    }\r\n\r\n    .zeichenfolge {\r\n      display: flex !important;\r\n      flex-wrap: wrap;\r\n      padding: 0 0 0 37% !important;\r\n    }\r\n\r\n    .drop-slot {\r\n      height: 40px;\r\n      width: 60px;\r\n      padding: 0 7px 10px 7px;\r\n      border: 1px solid black;\r\n      margin: 0 2px 0 0;\r\n    }\r\n\r\n    .start-area{\r\n      width: 45%;\r\n      min-height: 30px;\r\n      border: 1px solid black;\r\n      margin: 0 auto;\r\n    }\r\n\r\n</style>"]}]}